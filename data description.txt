FEATURES I WOULD LIKE TO TEST OUT/MODEL ON, that could be extracted from the raw dataset

Features:
- Last FGrating ((we'll need to remove scratches/withdrawal/nonrunners from these kind of queries, that is we're just using those rows that contains a FG-rating) (X)
- Last final position (i.e did it win, run 2nd, 3rd, etc in its last start) (X)
- Last FGrating at the track in question (Last FGrating at the same track that they are racing on in the race we're trying to predict) (X)
- Last final position at the track in question (Last final_position at the same track that they are racing on in the race we're trying to predict)(X)
- Last FGrating at the distance in question (at the exact distance as for the race we're trying to predict) (X)
- Last final position at the distance in question (at the exact distance as for the race we're trying to predict) (X)
- Last FGrating at the surface in question (Last FG-rating at the surface the race we're trying to predict is running on (They race at two surfaces in horse racing, either a turf-track or a dirt-track)) (X)
- Last final position at the surface in question (Last final_position at the surface the race we're trying to predict is running on) (X)
 --> One could consider adding these together to one or two totals for e.g total_last_fgrating and total_last_final_position - as we want to reduce Multicollinearity. 
NOTE: In many cases a horse won't have raced at a track previously, or at a particular distance, or surface. Later I will look deeper into a better solution for this, but as of now, we should just try to neutralize missing valid data as much as possible. (make sure it doesn't need to have data registered in every place, for the model to run)
NOTE2:"In question" just signals that we're trying to predict a particular race, based upon that race's particulat characteristics. That is a particular track, surface, distance, etc. Every horse and trainer would have preferences/categories where they perform better or worse, and that's what's we're trying to use for our predictions. 

- Mean FGrating overall (we'll need to remove scratches/withdrawal/nonrunners from these kind of queries, that is we're just using those rows that contains a FG-rating) (X)
- Mean final position overall (X)
- Mean FGrating last 10 starts (as compared to "overall", this would say something about the current general level) (X)
- Mean final position last 10 starts (X)
- Mean FGrating last 4 starts (We need a way to give recent performances more weight in the model - this would say something about current form) (X)
- Mean final position last 4 starts (X)
- Mean FGrating at the track in question (Here we're looking for course specialists, horses that are particular good at a particular track) (X)
- Mean final position at the track in question (X)
- Mean FGrating at the distance in question (think in bins of distances here - sprint, middle distance, long distance - look below) (X)
		Distance_Bins: (These bins will be used in multiple instances)
			*Sprint_distance = everything up to 1350 metres
			*Middle_distance = 1350-1800 metres
			*Long_Distance   = 1800 + metres
- Mean final position at the distance in question (bins) (X)
- Mean FGrating at the surface in question (turf-track or dirt-track) (X)
- Mean final position at the surface in question (X)
   --> One could consider adding these together to two totals for e.g total_mean_fgrating and total_mean_final_position - as we want to reduce Multicollinearity (but also weight for recency).  

- Top/Highest FGrating ever (here we're looking for maximum performance potential - the higher the number, the better they ran) (X)
- Top/Highest FGrating ever at the track in question (at "todays track", if live data) (X)
- Top/Highest FGrating ever at the distance in question (think bins - sprint, middle distance, long distance - look below) (the distance in question means at "todays track", if we were live with data) (X)
- Top/Highest FGrating ever at the surface in question (turf or dirt/aw) (X)
- Top/Highest FGrating last 3 starts or something like that. (We need a way to give recent performances more weight in the model) (X)
 --> One could consider adding these together to a total for e.g total_top_fgrating - as we want to reduce Multicollinearity. 

- True/False last race was a big new "top". A new top means a race that is 4 points or better than the previous best race ever for a particular horse, i.e a career best race by 4 points or more (a FGrating of say 130, when the previous best rating for this horse was a 125). 

- Days Since Last Race: How many days it has been since the horse has last raced. A horse that had been injured in its last race may have not raced recently.


- We need a way to model for trainer statistics, as these are very predictive
	These are important statistics and a good place to begin:
		*Trainer win percent last 1000 days (total wins / total starts)
		*Trainer win percent last 90 days 
		*Trainer win percent last 30 days
		*Trainer win percent last 1000 days per distance (distance bins: it's described in the mean fg rating section)
		*Trainer win percent last 1000 days on this race's surface 
		*Trainer ROI last 100 days 
		*Trainer ROI last 1000 days on this race's distance (bins)
		*Trainer ROI last 1000 days on this race's surface 
	NOTE: ROI here is a calculation based on the odds, where we use flat betting of e.g. 1 unit on every starter that fits into the category. (we could use 10 or 100 also, as long as it's the same for everyone)
			So if the ROI to be calculated is a Trainer's ROI for the last 100 days and we use 1 unit as our stake, here's how it would look:
				1) Every horse that has raced for this trainer during the last 100 days, and lost, will be settled as a loss of 1 unit * (the total of horses that has raced and not finished 1st)
			+	2) Every horse that has raced for this trainer during the last 100 days, and won, will be settled as a win of 1 unit * the win odds
					An Example. A trainer have 25 horses that has started the last 100 days. 23 of these lost, while 2 won. The two winners won at odds of 7 and 15
					That is 25 units invested (1 unit per every start), and 22 units gained (7*1 + 15*1). That's a loss of 3 units for a 25 unit investment.
						22/25 = 0,88 --> And this is the format I would like to keep the ROI calculations in. For every unit invested, that query shows you only get 0,88 back. 
	--> One could consider adding these together to a total for e.g total_trainer_power - as we want to reduce Multicollinearity. 
	
- We also need a way to model for jockey statistics:
	The most important statistics for Jockeys:***
		*Jockey win percent last 1000 days 
		*Jockey win percent last 1000 days on this track
		*Jockey win percent last 1000 days on this surface
		*Jockey win percent last 1000 days on this track AND surface
		*Jockey win percent last 1000 days on this distance (bins)
		*Jockey win percent last 1000 days on this surface AND distance (distance bins)
		*Jockey mean final position last 1000 days 
		*Jockey mean final position last 1000 days on this track
		*Jockey mean final position last 1000 days on this surface
		*Jockey mean final position last 1000 days on this track AND surface
		*Jockey mean final position last 1000 days on this distance (bins)
		*Jockey mean final position last 1000 days on this surface AND distance (distance bins)
		*Jockey Mean Path last 1000 days in general
		*Jockey Mean Path last 1000 days on this surface
		*Jockey Mean Path last 1000 days on this track AND surface
		*Jockey Mean Path last 1000 days on this distance (bins) AND surface
	--> One could consider adding these together to a couple of totals for e.g total_jockey_win-perc, total_jockey_final_pos and jockey_mean_path - as we want to reduce Multicollinearity. 

- There is also an extremely powerful predictor when combining trainer and jockey-statistics, to combo!	
	win-percentage and ROI for the jockey-trainer combination (last 1000 days). (I.e 'when these two work together, they have a winning percentage at X %' or 'a ROI of..')

- True/False if the horse has switched from carrying high weight (i.e 60 kg and higher) to low weight (i.e 54 kg and lower) from last time to this race - and the other way around - from low weight to high weight.  

- Horse win percentage (number of wins / number of starts for each horse)

- True/False Horse has won a race in its last five races

- We will need a way to account for the draw(startspor) win-percentages at the particular track, surface, and distance - so that a draw (starting gate) with a lesser chance of winning, also hurt the predictions of win probability.  
	Ideally it would be based on draw statistics: (easily calculated like these: https://racing.hkjc.com/racing/information/English/racing/Draw.aspx)
		*Draw win percent last 1000 days for this track, surface AND distance (exact distance)
		*Draw place percent last 1000 days for this track, surface AND distance (exact distance)
		*Mean path for this draw at this track, surface AND distance (exact distance)
		*Mean final_position for this draw at this track, surface AND distance (exact distance)

Data not available compared to the teddy koker project, in this dataset:
- Weight of the horses (Declared Weight). Shouldn't be that predictive, anyway, but will add in future versions. 
- True/False Horse was scratched/withdrawn/a non-runner in last race entry (this data is not included in the current data set)

Features saved for next gig due to them being a bit more complicated - but an attempt to solve it will of course be appreciated: 
*Win-% and ROI-stats per trainer also when considering another important factor:
			--> Days Since Last Race (number of days since the horses previous race. One could consider bins in here as  well, such as less than 7 days = quick turnaround, 7-14 days = short rest, 15-30 days = small break, 30-60 days = time off, 60-100 days = layoff, 100 + days = long layoff)
		*A very powerful statistic I would like to include at some time in the model, is when one look at trainers statistics for 1st race of layoff, 2nd race of layoff, and 3rd race of layoff. A layoff is a break of X Days (we'll have to define what a layoff is, but 60 + days for example). This is a very predictive factor. 
			- Trainer-stats and True/False for 1st race after a layoff. A layoff is defined when there is 60 days or longer since the date of the previous start. (the first start, after a long break)
			- Trainer-stats and True/False for 2nd race after a layoff. A layoff is defined if there is 60 days or longer since the date of the previous start.   (the 2nd start, after a long break) 
			- Trainer-stats and True/False for 3rd race after a layoff. A layoff is defined if there is 60 days or longer since the date of the previous start.   (the 3rd start, after a long break - often this is where they return to their best, when running for the 3rd consecutive time after a layoff/break)
----

DATA DESCRIPTION

Dato/Date: Date of the race. In hong kong there is only one race day, per day (racing two days a week). Bear in mind that the racing season starts in september, and ends in july, in Hong Kong. 

Track: The track the race was ran on, in Hong Kong that is either Sha Tin or Happy Valley. This is of importance, as horses often like Happy Valley or Sha Tin better than the other. Sha Tin is the main track. 

Løpsnr/race number: The race number (a race day consists of 8-11 races). Not important. 

Distance: The distance the particular race was ran at, in meters. This has predictive power. Some horses are experts at sprint distances (e.g 1200 meters), some at middle distance (e.g 1600 meters), and some at longer distances (e.g 2000 m). Trainers could have specialities, too. 
		-->(distance bins: sprint (everything up to 1350 metres), middle distance (1350-1800 metres), long distance (1800 + metres))

Surface: If the race was ran at Turf track (grass), or dirt track (AW - All Weather), which is a sand based surface. This has predictive power - some horses prefer turf racing, some horses prefer dirt racing. Trainers could have specialities here, too. 

Tot_Løpspremie: This is the total amount of prize money in the race. The higher the prize money, the better the race. 

Startspor/draw/gate number/start position: The start gate number/post position, high numbers are drawn "wide" while low numbers are drawn to the inside. This is important, as high start gate numbers will correlate with ground loss (a lot of "paths"), because there is an increased chance of getting a position outside of other horses in the turns. The exception is the distance 1000 metres at Sha Tin, at this distance there are no turns and high numbers are usually not a bad thing. 

Jockey: Who rode the horse in the race. Some jockeys win a lot more races than others. This could be calculated by a winning-% 

Ridevekt/riding weight/jockey weight: The weight of the jockey, the equivalent to "Actual Weight" in the teddy koker project. How much a jockey should (minimum) weigh in a given race is not a coincidence, it's based upon rules. Low weight (e.g 50 kg) represents racing against better horses with some weight advantages, while a high weight (e.g 60 kg) represents facing slower horses, but at a penalty. My impression is that it is easier to run against slower horses at a higher weight, than running against faster horses at a lower weight. This could be explored with the FGrating. 

Country: Where the horse was born. Only minimally interesting.

Alder/age: The age of the horse at the time of the race. A horse peaks at about 4 to 5 years old in average. Younger horses could improve more, older horses might get slower with age. 

TrainerName: The name of the trainer. A trainer is obviously important. How good they are could be calculated with a winning-% (wins/starts*100), but one could also calculate ROI based upon odds. There could also be hidden patterns based on age, distance, surface, the form of stable mates in the time period, etc. 

Tid/race time: The time of the race for the particular horse, in seconds. FGrating gives a much better measure of speed, than just raw times. (not when it started, but how longt it took to run from start to finish)

Path: This is unique info that not many have, so it's important to look for any edge here. This is a measure of how wide each horse has been in the turn(s). Should correlate with "Startspor". A higher numbers, means more ground loss due to wide position in the turns, i.e they have not ran the shortest way possible. 

Plassering/final position: The finishing position in a race. (i.e 1st, 3rd, 4th etc)

FGrating/rating: This is the most valuable and most unique piece of information in our dataset. The most important thing to get the most out of. It's kinda like a way to normalize race times ("Tid"), so that it measure the "fastness" of the race regardless of which track, which distance, or the conditions at the race day. A way to normalize how fast a horse ran. In the teddy koker project, this corresponds to the "beyer rating" (all though our numbers are of better quality than that). 

Odds/win odds: The odds the horse went off at in the market, i.e the probability of victory. This is important, as obviously a lower odds corresponds with a better finishing position in general. Our task is to identify those horses that have too high an odds, compared to their actual winning chances. That is the whole goal of the exercise that is betting on horses, to identify those horses that pays more than they should. 

RaceType: Mostly a distinguishing between "handicap races", where the horses do not carry the same jockey weight, and "kappløp" or "pure races" - where the horses carry the same jockey weight and the fastest horse most often wins. Not very importaint, I think. 

HorseId: Just an ID of the horse. 

JockeyId: Just an ID of the jockey. 

TrainerID: Just an ID of the trainer. 